<!-- 
  Example launch file for octomap_server mapping: 
  Listens to incoming PointCloud2 data and incrementally builds an octomap. 
  The data is sent out in different representations. 

  Copy this file into your workspace and adjust as needed, see
  www.ros.org/wiki/octomap_server for details  
-->
<launch>
  <node pkg="topic_tools" type="relay" name="kinect_1_relay" args="/kinect_1/sd/points /kinect_all/sd/points"/>
  <node pkg="topic_tools" type="relay" name="kinect_2_relay" args="/kinect_2/sd/points /kinect_all/sd/points"/>
  <node pkg="topic_tools" type="relay" name="kinect_3_relay" args="/kinect_3/sd/points /kinect_all/sd/points"/>
  <node pkg="topic_tools" type="relay" name="kinect_4_relay" args="/kinect_4/sd/points /kinect_all/sd/points"/>
  
	<node pkg="octomap_server" type="octomap_server_node" name="octomap_server">
		<param name="resolution" value="0.025" />
		
		<!-- fixed map frame (set to 'map' if SLAM or localization running!) -->
		<param name="frame_id" type="string" value="map" />
		
		<!-- maximum range to integrate (speedup!) -->
		<param name="sensor_model/max_range" value="3.0" />

		<param name="sensor_model/hit" value="0.7" />
		<param name="sensor_model/miss" value="0.4" />
		<param name="sensor_model/min" value="0.12" />
		<param name="sensor_model/max" value="0.95" />
		
		
		<!-- data source to integrate (PointCloud2) -->
		<remap from="cloud_in" to="/kinect_all/sd/points" />
		
	</node>
</launch>
